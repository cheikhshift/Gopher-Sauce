<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Gopher Sauce v0.6</title>
    <link>http://gophersauce.com/docs/</link>
    <description>Recent content in Home on Gopher Sauce v0.6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://gophersauce.com/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Project layout</title>
      <link>http://gophersauce.com/docs/workflow/code_gen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/workflow/code_gen/</guid>
      <description>Here is a sample gos project tree :
+-- gos.gxml // has GXML abstractions +-- web // web server root | +-- index.html +-- tmpl // template root | +-- sample.tmpl +-- types // has declared structs | +-- structs.go +-- api | +-- assets | +-- exported | +-- globals | +-- handlers | +-- methods | +-- sessions | +-- templates | +-- tracer +-- application.go +-- launcher.</description>
    </item>
    
    <item>
      <title>Task management</title>
      <link>http://gophersauce.com/docs/workflow/task_mgt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/workflow/task_mgt/</guid>
      <description>Team structure A team using gos must have a project manager, QA manager and software solution team. The roles are explained in depth below.
Project manager The project manager is a key player in any gos project. They must have a full knowledge of this framework and Go. Project managers are responsible for delegating the tasks, and writing the Go code bridging the internet and the software solution team&amp;rsquo;s code.</description>
    </item>
    
    <item>
      <title>Package architecture</title>
      <link>http://gophersauce.com/docs/workflow/package_arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/workflow/package_arch/</guid>
      <description>Go source generated by gos is distributed into separate packages. Each package has a functionality assigned to it. gos will generate 8 packages (9 in development mode) from your abstractions. This page covers the role of each package and architecture of a gos program.
Program architecture gos generates a program with your top level source code. This implies that sub level packages are reserved for code supporting program functionality. The top level source code is a program, with package main, using the generated packages to implement a web server.</description>
    </item>
    
    <item>
      <title>Library architecture</title>
      <link>http://gophersauce.com/docs/workflow/library_arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/workflow/library_arch/</guid>
      <description>Library architecture This section covers the functionality of each generated sub level package. Each package can be replaced, as long as the new package has the required exported identifiers.
package types This package contains your project&amp;rsquo;s data (struct) types. Abstracted gos data types are exported to this package as Go code.
API packages The following packages are located in sub level package api.
package assets This package has your project&amp;rsquo;s web and tmpl directory compiled to Go code.</description>
    </item>
    
    <item>
      <title>First project</title>
      <link>http://gophersauce.com/docs/workflow/first_project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/workflow/first_project/</guid>
      <description>Starting a project. Read the following steps to start a new gos project.
 Open your favorite terminal and change the working directory to the value of your environment variable GOPATH.
 Change the working directory again to src.
 Run the following command to start a new project :
gos &amp;ndash;make
 Run the following command to complete project setup.
gos &amp;ndash;t
 Read the next page to learn about GXML files.</description>
    </item>
    
    <item>
      <title>Build commands</title>
      <link>http://gophersauce.com/docs/gxml-abstractions/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/gxml-abstractions/shell/</guid>
      <description> With GXML, you can specify shell commands to run after code trans-pilation with tag &amp;lt;sh/&amp;gt;.
GXML tag &amp;lt;sh/&amp;gt; is placed at the root of your &amp;lt;gos/&amp;gt; tag.
&amp;lt;sh/&amp;gt;  Usage format
&amp;lt;sh&amp;gt;COMMAND&amp;lt;/sh&amp;gt;  Example :
  &amp;lt;gos&amp;gt; ... &amp;lt;sh&amp;gt;echo &amp;quot;Hi&amp;quot;&amp;lt;/sh&amp;gt; ... &amp;lt;/gos&amp;gt;  </description>
    </item>
    
    <item>
      <title>Data types</title>
      <link>http://gophersauce.com/docs/gxml-abstractions/structs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/gxml-abstractions/structs/</guid>
      <description>Data types are declared in GXML with tag &amp;lt;struct/&amp;gt;.
Syntax Struct tags are placed at the root of your &amp;lt;header/&amp;gt; tag.
GXML attributes :  name : Name of struct type.  GXML content : Declared struct fields. Must follow syntax : &amp;lt;NAME&amp;gt; &amp;lt;TYPE&amp;gt; &amp;lt;TAGS&amp;gt;. You may also document fields by placing comments prior declaring a field.
Sample tag : &amp;lt;header&amp;gt; &amp;lt;struct name=&amp;quot;Sample&amp;quot;&amp;gt; Field1 string Field2 int Field3 []string &amp;lt;/struct&amp;gt; &amp;lt;/header&amp;gt;  Exported to package:  types  Exports to files :  .</description>
    </item>
    
    <item>
      <title>Footer</title>
      <link>http://gophersauce.com/docs/_footer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/_footer/</guid>
      <description>Written by Cheikh Seck
 
var gaJsHost = ((&#34;https:&#34; == document.location.protocol) ? &#34;https://ssl.&#34; : &#34;http://www.&#34;); document.write(unescape(&#34;%3Cscript src=&#39;&#34; + gaJsHost + &#34;google-analytics.com/ga.js&#39; type=&#39;text/javascript&#39;%3E%3C/script%3E&#34;));  try { var pageTracker = _gat._getTracker(&#34;UA-71342160-1&#34;); pageTracker._trackPageview(); } catch (err) {}  </description>
    </item>
    
    <item>
      <title>Global variables</title>
      <link>http://gophersauce.com/docs/gxml-abstractions/globals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/gxml-abstractions/globals/</guid>
      <description> Global variables are declared in GXML with tag &amp;lt;var/&amp;gt;.
Syntax Var tags are placed at the root of your &amp;lt;gos/&amp;gt; tag.
GXML attributes :  type : variable type.  GXML content : Variable name. First letter of content is forced to uppercase by compiler.
Sample tag : &amp;lt;gos&amp;gt; ... &amp;lt;var type=&amp;quot;string&amp;quot;&amp;gt;Key&amp;lt;/var&amp;gt; ... &amp;lt;/gos&amp;gt;  Exported to package:  globals  Exports to files :  ./api/globals/variables.go  </description>
    </item>
    
    <item>
      <title>HTTP 1.1 services</title>
      <link>http://gophersauce.com/docs/gxml-abstractions/endpoints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/gxml-abstractions/endpoints/</guid>
      <description>HTTP 1.1 handlers are declared in GXML with tag &amp;lt;end/&amp;gt;.
Syntax End tags are placed at the root of your &amp;lt;endpoints/&amp;gt; tag.
GXML attributes :  path : request path to handle.
 type : specifies request type to handle, can be HTTP 1.1 RFC request methods (GET, PUT &amp;hellip;etc), star or f.
 type f end tags are executed if the request path includes the path specified. type star end tags handle all requests matching path attribute, disregarding any passed request methods.</description>
    </item>
    
    <item>
      <title>Init function</title>
      <link>http://gophersauce.com/docs/gxml-abstractions/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/gxml-abstractions/init/</guid>
      <description> Declare an initialization function for your project with GXML tag &amp;lt;init/&amp;gt;.
Syntax Init tags are placed at the root of your &amp;lt;gos/&amp;gt; tag.
GXML content : Go code block to run.
Sample tag : &amp;lt;gos&amp;gt; ... &amp;lt;init&amp;gt; println(&amp;quot;Hello world&amp;quot;) &amp;lt;/init&amp;gt; ... &amp;lt;/gos&amp;gt;  Exported to package:  main  Exports to files :  ./*.go  </description>
    </item>
    
    <item>
      <title>Main function</title>
      <link>http://gophersauce.com/docs/gxml-abstractions/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/gxml-abstractions/main/</guid>
      <description> Declare a main function for your project with GXML tag &amp;lt;main/&amp;gt;. This will be the code executed on web server start.
Syntax Main tags are placed at the root of your &amp;lt;gos/&amp;gt; tag.
GXML content : Go code block to run.
Sample tag : &amp;lt;gos&amp;gt; ... &amp;lt;main&amp;gt; println(&amp;quot;Hello world&amp;quot;) &amp;lt;/main&amp;gt; ... &amp;lt;/gos&amp;gt;  Exported to package:  main  Exports to files :  ./launcher.go  </description>
    </item>
    
    <item>
      <title>Methods</title>
      <link>http://gophersauce.com/docs/gxml-abstractions/methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/gxml-abstractions/methods/</guid>
      <description>Add a function to your project with GXML tag &amp;lt;func/&amp;gt;.
Syntax Function tags are placed at the root of your &amp;lt;methods/&amp;gt; tag.
GXML attributes  name : name of function. Access a function from a template with syntax {{ &amp;lt;FUNCTION NAME&amp;gt; &amp;lt;PARAM 1&amp;gt; &amp;lt;PARAM X&amp;gt; }} var : comma delimited function parameters. The syntax is as follows &amp;lt;PARAM 1&amp;gt; &amp;lt;TYPE&amp;gt;, &amp;lt;PARAM X&amp;gt; &amp;lt;TYPE&amp;gt; return : Go type of variable returned by function.</description>
    </item>
    
    <item>
      <title>Shutdown function</title>
      <link>http://gophersauce.com/docs/gxml-abstractions/shutdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/gxml-abstractions/shutdown/</guid>
      <description> Declare a shutdown function for your project with GXML tag &amp;lt;shutdown/&amp;gt;. This will be the code executed on web server exit.
Syntax Shutdown tags are placed at the root of your &amp;lt;gos/&amp;gt; tag.
GXML content : Go code block to run.
Sample tag : &amp;lt;gos&amp;gt; ... &amp;lt;shutdown&amp;gt; println(&amp;quot;Bye world&amp;quot;) &amp;lt;/shutdown&amp;gt; ... &amp;lt;/gos&amp;gt;  Exported to package:  main  Exports to files :  ./shutdown.go  </description>
    </item>
    
    <item>
      <title>Templates</title>
      <link>http://gophersauce.com/docs/gxml-abstractions/templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/gxml-abstractions/templates/</guid>
      <description>Add a Go template to your project with GXML tag &amp;lt;template/&amp;gt;.
Syntax Template tags are placed at the root of your &amp;lt;templates/&amp;gt; tag.
HTML templates HTML source used with templates are stored in your project&amp;rsquo;s tmpl directory. Templates files must have file extension .tmpl.
Scope of HTML templates Your GXML methods will be available to your templates as custom pipelines.
GXML attributes :  name : name of template. Render a template from a template with syntax {{ &amp;lt;TEMPLATE NAME&amp;gt; }} or {{ b&amp;lt;TEMPLATE NAME&amp;gt; $struct }}.</description>
    </item>
    
    <item>
      <title>Web root</title>
      <link>http://gophersauce.com/docs/gxml-abstractions/web_root/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gophersauce.com/docs/gxml-abstractions/web_root/</guid>
      <description>Your project&amp;rsquo;s web root is located at directory web.
File server Your web root is the root directory of your web server.
Templates Files with extension .tmpl are rendered. The request path of a template is the file path relative to your web root, without the file extension : .tmpl. For example, a file with path web/sample.tmpl would be requested as GET /sample.
Template syntax  Go templates  Scope Your GXML methods will be available to your web root templates as custom pipelines.</description>
    </item>
    
  </channel>
</rss>