[
{
	"uri": "http://gophersauce.com/docs/workflow/",
	"title": "Get started",
	"tags": [],
	"description": "Learn how to use Gopher Sauce with your team",
	"content": " Overview This section covers the architecture and development flow of a gos program. Using gos requires experience with Go, checkout the Go tour.\nRequirements gos requires Go +v1.7 installed with environment variable GOPATH set, and GOPATH/bin added to your executable path.\nDownload Run the following command to download and install gos :\ngo get -v github.com/cheikhshift/gos  Complete installation Run the following command to complete setup :\ngos deps  Index  Project layout : Learn the structure of a gos project. Task management : Learn how to get the most out of a gos project. Package architecture : Learn about the architecture of a gos project. First project : Start your first gos project.  "
},
{
	"uri": "http://gophersauce.com/docs/workflow/code_gen/",
	"title": "Project layout",
	"tags": [],
	"description": "Section about Gopher Sauce project layout",
	"content": " Here is a sample gos project tree :\n+-- gos.gxml // has GXML abstractions +-- tmpl // template root | +-- sample.tmpl +-- web // web server root | +-- index.html +-- types // has declared structs | +-- structs.go +-- api // has Go source of web server | +-- assets | +-- exported | +-- globals | +-- handlers | +-- methods | +-- sessions | +-- templates | +-- tracer +-- application.go +-- launcher.go // has code ran on server start +-- shutdown.go // has code ran on server stop  Reserved folders. Directories listed above are reserved for use by the gos trans-piler. Run the project atleast once to have the full tree generated.\n"
},
{
	"uri": "http://gophersauce.com/docs/gxml-abstractions/",
	"title": "GXML",
	"tags": [],
	"description": "Section about Gopher Sauce GXML tags.",
	"content": " About Gopher Sauce markup language, a.k.a GXML, is a derivative of XML. It is a hybrid configuration and programming markup language. Reading this document requires some knowledge of XML (or HTML) to use abstractions.\nTemplating engine gos uses Go package html/template to render your templates. Read more about the package here.\nDefinitions of terms used in this section :\n GXML attributes : refers to XML attributes of a tag. GXML content : refers to Go code found inside a tag. Also known as the tag\u0026rsquo;s contents. Exported to package : specifies the package the abstraction exports code to.\n If applicable, a tag will specify the generated package it exports code to. You may use this package\u0026rsquo;s exported identifiers (package with exported code) to access your declared abstractions. The name of the identifiers will be the value of the name attribute, unless stated otherwise, of a GXML tag. For example, to use a declared method with just name attribute Foo within a web service code block would be methods.Foo(). Package imports are handled automatically with Go code written in GXML files.   One per directory Keep one gxml file per directory.\nRoot tags The section covers GXML tags located at the root of tag \u0026lt;gos /\u0026gt;\n\u0026lt;deploy/\u0026gt;  Specifies the build strategy the gos trans-piler should use. The options are :\n webapp : export project as web server. faas : export your project\u0026rsquo;s templates and HTTP services as OpenFaaS functions. package : export your project as a go package.   \u0026lt;port/\u0026gt;  Port number web server should listen on.  \u0026lt;package/\u0026gt;  If deploy type is set to package, the name of the template module.  \u0026lt;not_found/\u0026gt;  Server path to redirect to if a request path was not found.  \u0026lt;error/\u0026gt;  Server path to redirect to on request crash.  \u0026lt;output/\u0026gt;  The name of the go source to save your program as.  \u0026lt;domain/\u0026gt;  Domain name of web server, used with Cookie protection.  \u0026lt;key/\u0026gt;  32 byte string used to encrypt sessions.  \u0026lt;header/\u0026gt;  Has data (struct) type declarations as children.  \u0026lt;methods/\u0026gt;  Has function declarations as children.  \u0026lt;templates/\u0026gt;  Has template declarations as children.  \u0026lt;endpoints/\u0026gt;  Has HTTP service declarations as children.  Sample GXML file Here is a sample GXML file :\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;gos\u0026gt; \u0026lt;!-- xml docs : http://golangserver.com/docs/gxml-abstractions --\u0026gt; \u0026lt;deploy\u0026gt;webapp\u0026lt;/deploy\u0026gt; \u0026lt;port\u0026gt;8080\u0026lt;/port\u0026gt; \u0026lt;package\u0026gt;if-package-is-library\u0026lt;/package\u0026gt; \u0026lt;not_found\u0026gt;/your-404-page\u0026lt;/not_found\u0026gt; \u0026lt;error\u0026gt;/your-500-page\u0026lt;/error\u0026gt; \u0026lt;output\u0026gt;application.go\u0026lt;/output\u0026gt; \u0026lt;domain\u0026gt;\u0026lt;/domain\u0026gt;\u0026lt;!-- Cookie domain --\u0026gt; \u0026lt;main\u0026gt;\t//psss go code here : func main() \u0026lt;/main\u0026gt; \u0026lt;key\u0026gt;a very very very very secret key\u0026lt;/key\u0026gt; \u0026lt;header\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;methods\u0026gt; \u0026lt;/methods\u0026gt; \u0026lt;templates\u0026gt; \u0026lt;/templates\u0026gt; \u0026lt;endpoints\u0026gt; \u0026lt;/endpoints\u0026gt; \u0026lt;/gos\u0026gt;  "
},
{
	"uri": "http://gophersauce.com/docs/workflow/task_mgt/",
	"title": "Task management",
	"tags": [],
	"description": "Section about task management with Gopher Sauce as a team",
	"content": " Team structure A team using gos must have a project manager, QA manager and software solution team. The roles are explained in depth below.\nProject manager The project manager is a key player in any gos project. They must have a full knowledge of this framework and Go. Project managers are responsible for delegating the tasks, and writing the Go code bridging the internet and the software solution team\u0026rsquo;s code.\nI highly recommend that managers use a form of distributed task management, such as trello.\nQA manager The QA manager is responsible for writing tests for the project\u0026rsquo;s code. They should have experience with Go and understand a gos project\u0026rsquo;s layout.\nSoftware solution team The software solution team is responsible for adding functionality to the project. They should not edit go source generated by gos. Generated packages can/should be extended by adding new Go source files to package. The software solution team does not need any knowledge of how to use this framework. They are required to have experience with Go and understand the functionality of each generated package. The software solution team must understand this framework, if they are delegated with the task of writing templates.\nHere is a visual representation of gos task flow.\n "
},
{
	"uri": "http://gophersauce.com/docs/workflow/package_arch/",
	"title": "Package architecture",
	"tags": [],
	"description": "Section about Gopher Sauce package layout.",
	"content": " Go source generated by gos is distributed into separate packages. Each package has a functionality assigned to it. gos will generate 8 packages (9 in development mode) from your abstractions.\nProgram architecture gos generates a program with your top level Go source code. This implies that sub level packages are reserved for code supporting program functionality. The top level source code is a program, with package main, using the generated Go packages to implement a web server.\nHere is a diagram of the final program architecture :\n "
},
{
	"uri": "http://gophersauce.com/docs/testing/",
	"title": "Testing",
	"tags": [],
	"description": "Section about writing tests for your abstractions.",
	"content": " This section covers testing gos abstractions. Testing will ensure code is working as expected, without brute testing. gos generates the test functions for global variables, handlers, methods, templates and data types.\nTest generation On each trans-pilation, gos will check the designated test file for each generated package. If an abstraction\u0026rsquo;s test was not found, it will be appended to the test file. Changes made to test files will not be over-written during trans-pilation as well.\nTesting abstractions The next pages will cover writing unit tests for your abstractions.\n"
},
{
	"uri": "http://gophersauce.com/docs/deploying/",
	"title": "Deployments",
	"tags": [],
	"description": "Section about Gopher Sauce deployments.",
	"content": " Build flow Here is a diagram of the gos build flow :\n Launching an instance Perform the following steps to launch a development version of your web server :\n Open your favorite terminal.\n Change the working directory to your project\u0026rsquo;s.\n Run the following command to run your project :\n  gos --run  Exporting a project Perform the following steps to export a production version of your project.\n Open your favorite terminal.\n Change the working directory to your project\u0026rsquo;s.\n Run the following command to export your project :\n  gos --export  "
},
{
	"uri": "http://gophersauce.com/docs/workflow/library_arch/",
	"title": "Library architecture",
	"tags": [],
	"description": "Section about exported library.",
	"content": " Library architecture This section covers the functionality of each generated sub level package. Each package can be replaced, as long as the new package has the required exported identifiers.\npackage types This package contains your project\u0026rsquo;s data (struct) types. Abstracted gos data types are exported to this package as Go code.\nAPI packages The following packages are located in sub level package api.\npackage assets This package has your project\u0026rsquo;s web and tmpl directory compiled to Go code. You can find more information about using the API here.\npackage exported This package declares gos modules exported for use by your project. You can read more about modules here.\npackage globals This package contains your project\u0026rsquo;s global variables, constants and enumerations.\npackage handlers This package contains your project\u0026rsquo;s HTTP handlers.\nRequired functions: // Adapter function to generate http.HandlerFunc, only required with // projects in development mode. func MakeHandler(fn func(http.ResponseWriter, *http.Request, opentracing.Span)) http.HandlerFunc // Adapter function to generate http.HandlerFunc, only required with // projects in production mode. func MakeHandler(fn func(http.ResponseWriter, *http.Request)) http.HandlerFunc  package methods This package contains your project\u0026rsquo;s functions.\npackage sessions This package contains your sessions\u0026rsquo; store.\nRequired exported variables: var Store *\u0026quot;github.com/gorilla/sessions\u0026quot;.CookieStore  package templates This package contains code to render templates and log template errors.\nRequired variables: var Prod bool var templateCache \u0026quot;github.com/cheikhshift/gos/web\u0026quot;.TemplateCacheStore var WebCache \u0026quot;github.com/cheikhshift/gos/web\u0026quot;.CacheStore // map of custom template pipelines var TemplateFuncStore \u0026quot;html/template\u0026quot;.FuncMap  Required functions: // Load a web page based on the path passed. // Path is relative to your web root. func LoadPage(path string) (*\u0026quot;github.com/cheikhshift/gos/web\u0026quot;.Page, error) // Render template as HTTP response. // This function is only required with projects in development mode. // span parameter will have the current request span. func RenderTemplate(w http.ResponseWriter, p *\u0026quot;github.com/cheikhshift/gos/web\u0026quot;.Page, span opentracing.Span) // Render template as HTTP response. // This function is only required with projects in production mode. func RenderTemplate(w http.ResponseWriter, p *\u0026quot;github.com/cheikhshift/gos/web\u0026quot;.Page) // Inspect template using a relative path to project root. // templatePath parameter specifies the relative path to resource // within assets package. // data parameter specifies the struct literal to use with template // rendering func DebugTemplatePath(templatePath string, data interface{}) // Inspect request and template string to log fault func DebugTemplate(w http.ResponseWriter, r *http.Request, tmpl string)  package tracer This package is used to setup a tracing server for your web server. Please make sure to use a Go routine to listen on any port.\nRequired functions: // Setup and launch trace server. func LoadTraceServer()  "
},
{
	"uri": "http://gophersauce.com/docs/workflow/first_project/",
	"title": "First project",
	"tags": [],
	"description": "Section about starting your first Gopher Sauce project",
	"content": " Starting a project. Read the following steps to start a new gos project.\n Open your favorite terminal and change the working directory to the value of your environment variable GOPATH.\n Change the working directory to src.\n Run the following command to start a new project :\n  gos --make   Run the following command to complete project setup.  gos --t  Read the next page to learn about GXML files.\n"
},
{
	"uri": "http://gophersauce.com/docs/tooling/",
	"title": "Tools",
	"tags": [],
	"description": "Section about Gopher Sauce tools to help with workflow.",
	"content": " Here is a list of gos tools :\nEditors  IDE\n Vim plugin\n Sublime plugin\n  Monitoring  Cleo : Web server heap monitoring.\n Megalith : Web server uptime logging.\n  "
},
{
	"uri": "http://gophersauce.com/docs/resources/",
	"title": "Resources",
	"tags": [],
	"description": "List of Gopher Sauce resources",
	"content": " Guides  HTTPS\n OpenFaaS function\n  Workshops  e Workshop 01: Load a template from module.\n e Workshop 02 : Invoke a function from module.\n e-Workshop 03 : Invoke a Go function, without GopherSauce abstractions as pipeline\n Have a suggestion of what should be covered, send me an email at : cheikhhseck@gmail.com\n  "
},
{
	"uri": "http://gophersauce.com/docs/gxml-abstractions/shell/",
	"title": "Build commands",
	"tags": [],
	"description": "Section about using shell commands to customize builds.",
	"content": " With GXML, you can specify shell commands to run after trans-pilation with tag \u0026lt;sh/\u0026gt;.\nSyntax GXML tag \u0026lt;sh/\u0026gt; is placed at the root of your \u0026lt;gos/\u0026gt; tag.\nGXML content : The shell command to run after trans-pilation.\nSample tag : \u0026lt;gos\u0026gt; ... \u0026lt;sh\u0026gt;echo \u0026quot;Hi\u0026quot;\u0026lt;/sh\u0026gt; ... \u0026lt;/gos\u0026gt;  "
},
{
	"uri": "http://gophersauce.com/docs/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://gophersauce.com/docs/gxml-abstractions/structs/",
	"title": "Data types",
	"tags": [],
	"description": "Section about writing data types with Gopher Sauce.",
	"content": " Data (struct) types are declared in GXML with tag \u0026lt;struct/\u0026gt;.\nSyntax Struct tags are placed at the root of your \u0026lt;header/\u0026gt; tag.\nGXML attributes :  name : Name of struct type.  GXML content : Declared struct fields. Must follow syntax : \u0026lt;NAME\u0026gt; \u0026lt;TYPE\u0026gt; \u0026lt;TAGS\u0026gt;. You may also document fields by placing comments prior declaring a field.\nSample tag : \u0026lt;header\u0026gt; \u0026lt;struct name=\u0026quot;Sample\u0026quot;\u0026gt; // Sample // comment Field1 string Field2 int Field3 []string \u0026lt;/struct\u0026gt; \u0026lt;/header\u0026gt;  Exported to package:  types  Exports to files :  ./types/structs.go\n ./types/struct_funcs.go\n  Writes tests to :  ./types/types_test.go  "
},
{
	"uri": "http://gophersauce.com/docs/_footer/",
	"title": "Footer",
	"tags": [],
	"description": "",
	"content": "#navigation a { color: #847f7f; }  Written by Cheikh Seck, Built with Hugo\n \nvar gaJsHost = ((\"https:\" == document.location.protocol) ? \"https://ssl.\" : \"http://www.\"); document.write(unescape(\"%3Cscript src='\" + gaJsHost + \"google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E\"));  try { var pageTracker = _gat._getTracker(\"UA-71342160-1\"); pageTracker._trackPageview(); } catch (err) {}  "
},
{
	"uri": "http://gophersauce.com/docs/gxml-abstractions/globals/",
	"title": "Global variables",
	"tags": [],
	"description": "Section about using variable tags.",
	"content": " Global variables are declared in GXML with tag \u0026lt;var/\u0026gt;.\nSyntax Var tags are placed at the root of your \u0026lt;gos/\u0026gt; tag.\nGXML attributes :  type : variable type.  GXML content : Defines variable name. First letter of content is forced to uppercase by trans-piler. The variable name will be your variable\u0026rsquo;s exported identifier.\nSample tag : \u0026lt;gos\u0026gt; ... \u0026lt;var type=\u0026quot;string\u0026quot;\u0026gt;Key\u0026lt;/var\u0026gt; ... \u0026lt;/gos\u0026gt;  Exported to package:  globals  Exports to files :  ./api/globals/variables.go  Writes tests to :  ./api/globals/globals_test.go  "
},
{
	"uri": "http://gophersauce.com/docs/testing/globals/",
	"title": "Globals",
	"tags": [],
	"description": "Section about testing your project&#39;s globals.",
	"content": " How to test To test a variable, compare it to the expected value. If the variable is not similar to the expected value, fail the test.\n"
},
{
	"uri": "http://gophersauce.com/docs/gxml-abstractions/endpoints/",
	"title": "HTTP 1.1 services",
	"tags": [],
	"description": "Section about using endpoint tags.",
	"content": " HTTP 1.1 handlers are declared in GXML with tag \u0026lt;end/\u0026gt;.\nSyntax End tags are placed at the root of your \u0026lt;endpoints/\u0026gt; tag.\nGXML attributes :  path : request path to handle.\n type : specifies request type to handle, can be HTTP 1.1 RFC request methods (GET, PUT \u0026hellip;etc), star or f.\n type f end tags are executed if the request path includes the path specified. type star end tags handle all requests matching path attribute, disregarding any passed request methods.  id : specifies ID to use with opentracing.\n  GXML content : Defines Go code to be ran on handler execution.\nComments To comment an HTTP handler use XML style comments. The comments must be in your tag\u0026rsquo;s GXML content. For example :\n \u0026lt;end\u0026gt; \u0026lt;!-- Comment --\u0026gt; \u0026lt;/end\u0026gt;  Scope of code You may use other Go packages without explicitly importing them. This is due to the fact that gos uses a command to add missing imports to generated source code.\nVariables  var response string : JSON string to return as response. var callmet bool : If set to true prevents the next handler from executing. var r *http.Request : Current request to handler. var w http.ResponseWriter : Response of request. var session *\u0026quot;github.com/gorilla/sessions\u0026quot;.Session : Current user session.  Debug variables These variables are only available on debug :\n var span opentracing.Span : Span of current request.  Functions These functions are available to your code :\n func mResponse(v interface{}) string : Converts a struct into a formatted string. For example JSON, XML or YAML.  Sample tag for root of web server : \u0026lt;endpoints\u0026gt; \u0026lt;end path=\u0026quot;/\u0026quot; id=\u0026quot;foo\u0026quot; type=\u0026quot;GET\u0026quot; \u0026gt; \u0026lt;!-- Handler comment --\u0026gt; response = \u0026quot;Hi\u0026quot; \u0026lt;/end\u0026gt; \u0026lt;/endpoints\u0026gt;  Exported to package:  handlers  Exports to files :  ./api/handlers/*.go  Writes tests to :  ./api/handlers/handlers_test.go ./api/handlers/handlers_internal_test.go  "
},
{
	"uri": "http://gophersauce.com/docs/testing/handlers/",
	"title": "Handlers",
	"tags": [],
	"description": "Section about testing your project&#39;s end tags.",
	"content": " How to test Handlers can be tested with gos sub-level package onyx. onyx provides functions to create new HTTP requests as well as execute a handler and determine test result.\nAvoid direct handler tests gos generates two versions of your HTTP handler functions, one for development and one for production. To ensure your tests never break, use your handlers\u0026rsquo; package function MakeHandler to keep your tests from breaking.\nSample test Below is source code using onyx to test an HTTP handler. Notice how MakeHandler is the handler, while the test name is different.\npackage handlers import \u0026quot;testing\u0026quot; import \u0026quot;github.com/cheikhshift/gos/onyx\u0026quot; // Camel case version of method + request path, // without slashes, // prefixed with `Test` func TestGETIndex(t *testing.T) { // Load all handlers. h := MakeHandler(Handler) // New request to GET /index req,err := onyx.NewRequest(\u0026quot;GET\u0026quot;, \u0026quot;/index\u0026quot;) if err != nil { panic(err) } // execute, fail test if code // is not 200. onyx.Handle(req, h, t) }  "
},
{
	"uri": "http://gophersauce.com/docs/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": " Gopher Sauce Documentation Welcome Welcome to the Gopher Sauce documentation. Gopher Sauce is an all-in-one Go web server framework. Gopher Sauce abstracts templating, HTTP services, build commands, functions and web server events. It provides a custom markup language to write these abstractions. Gopher Sauce abstractions also come at zero cost. On export, your abstractions are split into different sub-level packages tied to functionality. As a result, You can stop using Gopher Sauce without an impact to your team; as well as work on a Gopher Sauce project, with no knowledge of the framework. Using Gopher Sauce does require experience with Go (even if your just starting). Gopher Sauce has the following framework offerings :\nEnterprise work flow Gopher Sauce exports your code into different sub level packages. Each exported package is tied to a certain web server functionality. Your packages can be modified without Gopher Sauce, this is to give your team everything Go has to offer as a programming language, while reducing the learning curve to onboard new team members. The exported code puts a strong emphasis on readability, testability and documentation.\nExtensibility A set of Gopher Sauce abstractions can be used with another project. This is useful for splitting large projects into smaller, more distributed tasks. You may find more information about extensibility here.\nFramework code Template loggers Gopher Sauce will generate additional code to debug your templates. This code will find run time exceptions caused by a template, and log it to your program\u0026rsquo;s standard output. There are no additional loggers to save output to a cloud service (with open source version).\nWeb handlers Gopher Sauce will generate one web handler to handle all requests to your web root or HTTP services.\nWeb server source Gopher Sauce will generate the Go source files needed to build your web server program. The generated code will be highly readable and ready for changes in the future.\nOpen Tracing Gopher Sauce generates code to trace HTTP requests and template rendering. The library abstracted for use is opentracing. Tracing is only generated during development mode. You can access your traces at port 8700 of your web server.\nMonolith Gopher Sauce generates monolith binaries, with all aspects of your project merged into one. The monolith architecture enables the possibility of loading server side functions with Go templates. This removes the requirement of defining an HTTP resource each time a functionality is needed. Nonetheless, exported code can be used to build microservices.\nIn short, Gopher Sauce is a modern, resilient (doesn\u0026rsquo;t age) cloud native framework.\nThe name Gopher Sauce can be abbreviated as gos, and will be used as such throughout this documentation.\n"
},
{
	"uri": "http://gophersauce.com/docs/gxml-abstractions/init/",
	"title": "Init function",
	"tags": [],
	"description": "Section about writing an init function for your project.",
	"content": " Declare an initialization function for your project with GXML tag \u0026lt;init/\u0026gt;.\nSyntax Init tags are placed at the root of your \u0026lt;gos/\u0026gt; tag.\nGXML content : Defines Go code block to run.\nSample tag : \u0026lt;gos\u0026gt; ... \u0026lt;init\u0026gt; println(\u0026quot;Hello world\u0026quot;) \u0026lt;/init\u0026gt; ... \u0026lt;/gos\u0026gt;  Exported to package:  main  Exports to files :  ./*.go  "
},
{
	"uri": "http://gophersauce.com/docs/gxml-abstractions/main/",
	"title": "Main function",
	"tags": [],
	"description": "Section about executing Go code on web server start.",
	"content": " Declare a main function for your project with GXML tag \u0026lt;main/\u0026gt;. This will be the code executed on web server start.\nSyntax Main tags are placed at the root of your \u0026lt;gos/\u0026gt; tag.\nGXML content : Defines Go code block to run.\nSample tag : \u0026lt;gos\u0026gt; ... \u0026lt;main\u0026gt; println(\u0026quot;Hello world\u0026quot;) \u0026lt;/main\u0026gt; ... \u0026lt;/gos\u0026gt;  Exported to package:  main  Exports to files :  ./launcher.go  "
},
{
	"uri": "http://gophersauce.com/docs/gxml-abstractions/methods/",
	"title": "Methods",
	"tags": [],
	"description": "Section about declaring template pipelines with Gopher Sauce.",
	"content": " Add a function to your project with GXML tag \u0026lt;func/\u0026gt;.\nSyntax Function tags are placed at the root of your \u0026lt;methods/\u0026gt; tag.\nGXML attributes  name : name of function. Access a function from a template with syntax {{ \u0026lt;FUNCTION NAME\u0026gt; \u0026lt;PARAM 1\u0026gt; \u0026lt;PARAM X\u0026gt; }} var : comma delimited function parameters. The syntax is as follows \u0026lt;PARAM 1\u0026gt; \u0026lt;TYPE\u0026gt;, \u0026lt;PARAM X\u0026gt; \u0026lt;TYPE\u0026gt; return : Go type of variable returned by function.  GXML content : Defines Go code block to run.\nComments To comment a function use XML style comments. The comments must be in your tag\u0026rsquo;s GXML content. For example :\n \u0026lt;func\u0026gt; \u0026lt;!-- Comment --\u0026gt; \u0026lt;/func\u0026gt;  Sample tag : \u0026lt;methods\u0026gt; ... \u0026lt;func name=\u0026quot;Greet\u0026quot; var=\u0026quot;name string\u0026quot; return=\u0026quot;string\u0026quot;\u0026gt; \u0026lt;!-- this function greets people --\u0026gt; return fmt.Sprintf(\u0026quot;Hi %s\u0026quot;, name) \u0026lt;/func\u0026gt; ... \u0026lt;/methods\u0026gt;  Exported to package:  methods  Exports to files :  ./api/methods/*.go  Writes tests to :  ./api/methods/methods_test.go  "
},
{
	"uri": "http://gophersauce.com/docs/gxml-abstractions/shutdown/",
	"title": "Shutdown function",
	"tags": [],
	"description": "Section about executing Go code on web server exit.",
	"content": " Declare a shutdown function for your project with GXML tag \u0026lt;shutdown/\u0026gt;. This will be the code executed on web server exit.\nSyntax Shutdown tags are placed at the root of your \u0026lt;gos/\u0026gt; tag.\nGXML content : Defines Go code block to run.\nSample tag : \u0026lt;gos\u0026gt; ... \u0026lt;shutdown\u0026gt; println(\u0026quot;Bye world\u0026quot;) \u0026lt;/shutdown\u0026gt; ... \u0026lt;/gos\u0026gt;  Exported to package:  main  Exports to files :  ./shutdown.go  "
},
{
	"uri": "http://gophersauce.com/docs/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://gophersauce.com/docs/gxml-abstractions/templates/",
	"title": "Templates",
	"tags": [],
	"description": "Section about using template tags.",
	"content": " Add a Go template to your project with GXML tag \u0026lt;template/\u0026gt;.\nSyntax Template tags are placed at the root of your \u0026lt;templates/\u0026gt; tag.\nHTML templates HTML source used with templates are stored in your project\u0026rsquo;s tmpl directory. Templates files must have file extension .tmpl. Templates follow Go\u0026rsquo;s html template format.\nScope of HTML templates Your GXML methods will be available to your templates as custom pipelines.\nGXML attributes :  name : name of template. Render a template from another template with syntax {{ \u0026lt;TEMPLATE NAME\u0026gt; }} or {{ b\u0026lt;TEMPLATE NAME\u0026gt; $struct }}.\n $struct : a variable with your template\u0026rsquo;s data.  tmpl : path to Go template HTML, relative to tmpl directory, without file extension .tmpl\n struct : struct type to use with template. The struct type will provide the identifiers available to a template.\n  GXML content : N/A\nComments To comment a function use XML style comments. The comments must be in your tag\u0026rsquo;s GXML content. For example :\n \u0026lt;template\u0026gt; \u0026lt;!-- Comment --\u0026gt; \u0026lt;/template\u0026gt;  Sample tag : \u0026lt;templates\u0026gt; ... \u0026lt;template name=\u0026quot;Sample\u0026quot; tmpl=\u0026quot;img\u0026quot; struct=\u0026quot;\u0026quot; \u0026gt; \u0026lt;!-- Sample template loads HTML source from tmpl/img.tmpl --\u0026gt; \u0026lt;/template\u0026gt; ... \u0026lt;/templates\u0026gt;  Exported to package:  templates  Exports to files :  ./api/templates/*.go  Writes tests to :  ./api/templates/templates_test.go  "
},
{
	"uri": "http://gophersauce.com/docs/testing/templates/",
	"title": "Templates",
	"tags": [],
	"description": "Section about testing your project&#39;s templates .",
	"content": " How to test On panic, templates render as an empty string. Thus to test a gos template, the result must be compared with an empty string, if the two are similar, fail the test.\nWhich function to render with? A template abstraction exports a function to render itself with one parameter. The parameter has the type specified in the template\u0026rsquo;s struct attribute. The function will have the name specified in the template\u0026rsquo;s name attribute.\nSample GXML : The GXML code below will declare a template named Foo that uses data type types.MyType.\n\u0026lt;gos\u0026gt; ... \u0026lt;template name=\u0026quot;Foo\u0026quot; path=\u0026quot;bar\u0026quot; struct=\u0026quot;types.MyType\u0026quot; /\u0026gt; ... \u0026lt;/gos\u0026gt;  Sample test The Go code below is a test of template Foo.\npackage templates import ( \u0026quot;my/project/app/types\u0026quot; ) func TestFoo(t *testing.T) { // render template res := Foo(types.MyType{}) // check if empty if res == \u0026quot;\u0026quot; { t.Error(\u0026quot;Empty string...\u0026quot;) } }  "
},
{
	"uri": "http://gophersauce.com/docs/gxml-abstractions/web_root/",
	"title": "Web root",
	"tags": [],
	"description": "Section about your project&#39;s web root.",
	"content": " Your project\u0026rsquo;s web root is located at directory web.\nFile server Your web root is the root directory of your web server.\nTemplates Files with extension .tmpl are rendered. The request path of a template is the file path relative to your web root, without the file extension : .tmpl. For example, a file with path web/sample.tmpl would be requested as GET /sample.\nTemplate syntax  Utilizes Go HTML templates.  Scope Your GXML methods will be available to your web root templates as custom pipelines.\nStruct Templates in your web root are assigned the following struct type.\ntype Page struct { R *http.Request Session *\u0026quot;github.com/gorilla/sessions\u0026quot;.Session }  "
}]