{"name":"GoS","tagline":"Go Lang template SDK","body":"### How to install GoS\r\n\tgo get -u github.com/cheikhshift/gos/...\r\n\r\n\r\n# Table of Content\r\n\r\n 1. [GoS XML template](#gos-xml-template)\r\n 2. [GoS project layout](#gos-project-layout)\r\n 3. [Core Usage](#core-usage) \r\n\t 1. [Using GoS command without parameters](#using-gos-command-without-parameters)\r\n\t 2. [GoS running application](#gos-running-application)\r\n\t 3. [GoS export application](#gos-export-application)\r\n 4. [Configuring GoS xml file](#configuring-gos-xml-file)\r\n\t1. [Deploy](#deploy)\r\n\t2. [Port](#port)\r\n\t3. [Output](#output)\r\n\t4. [Key](#key)\r\n\t5. [Init](#init)\r\n\t6. [Main](#main)\r\n\t7. [Var](#var)\r\n\t8. [Header](#header)\r\n\t\t1. [Structs](#structs)\r\n\t\t2. [Objects](#objects)\r\n9. [Methods](#methods)\r\n10. [Timers](#timers)\r\n11. [Templates](#templates)\r\n12. [API Generation](#api-generation)\r\n13.  [Imports](#imports)\r\n 5.  [GoS builtin template functions](#gos-builtin-template-functions)\r\n 6. [GoS page](#gos-page)\r\n 7. [Bug tracking](#bug-tracking)\r\n\r\n# Gopher Sauce Server Generation\r\n![Implies that Gopher sauce uses Go to write go programs.](https://lh3.googleusercontent.com/-vnw4NhuJKQY/VmuZgzodIPI/AAAAAAAAAAM/mbm7EfWjfsY/s0/xlarge.png \"xlarge.png\")\r\n\r\nGopher Sauce is is a command line tool used for compiling GoS projects. A GoS project uses XML sources and Go lang packages to create a web server. It uses xml to build onto Go lang's [template](https://golang.org/pkg/html/template/)  processing functionality, making it easier to define custom objects,methods and structs that are accessible to your templates as well as any Go lang declarations within your GoS project.\r\nGopher Sauce makes web server application distribution easy by compiling your entire Gopher Sauce application's sources and misc. file resources into one binary. \r\n\r\n\r\n### Handle GoS Dependencies\r\nThe application generated by Gopher Sauce has certain dependencies. Please run the command below to download them before attempting to run or export your application. (Assuming $GOPATH is set)\r\n\r\n\t$GOPATH/bin/gos dependencies\r\n\r\n\r\n\r\n# GoS XML template\r\nThe GoS XML template is where your application's imports, structs,objects,methods,timers,templates and end point hooks. Here is a fully documented project template [file](https://github.com/cheikhshift/Gopher-Sauce/blob/master/src/github.com/cheikhshift/gosapphire/server.xml)\r\n\r\n Below is an example of a very minimal GoS XML source : \r\nThis Example will save a file named server_out.go to the package package in the gos cmd tool. It will create one struct called DemoChild in the native go manner.\r\n\r\n\t <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\t<gos>\r\n\t\t<deploy>webapp</deploy>\r\n\t\t<port>8080</port>\r\n\t\t\r\n\t\t<output>server_out.go</output>\r\n\t\r\n\t\t<key>something-secretive-is-what-a-gorrilla-needs</key>\r\n\t\t<header> \r\n\t\t\t<!-- remember to Jumpline when stating methods or different struct attributes, it is vital for our parser \\n trick -->\r\n\t\t<struct name=\"DemoChild\">\r\n\t\t\tSomeOtherAttr string\r\n\t\t</struct>\r\n\t\t</header>\r\n\t</gos>\r\n\r\n# GoS project layout\r\nThis section covers the integration of GoS with your current Go configuration. GoS project minimally requires a GoS XML template, a web root folder and a template root folder.\r\n\r\n - Template folder is the root folder for all templates declared within your application\r\n - Web root can contain both usual server resource data and template pages as well. Template pages within the  web root folder have access to user sessions.\r\n\t - *webroot/dist/ is initialized as a fileserver to correct issues when serving css files. It will not compile templates and handle api end points with the `/dist/` prefix.\r\n\r\nYour GoS project should look like this\r\n\t\t\r\n\t\t$GOPATH/src/\r\n\t\t\t|-\tyour/package/name\r\n\t\t\t\t\t\t\t|-\t\tgos_xml_template.xml\r\n\t\t\t\t\t\t\t|-\t\tweb_root/\r\n\t\t\t\t\t\t\t\t\t\t|-\tindex.html\r\n\t\t\t\t\t\t\t\t\ttemplate_root/\r\n\t\t\t\t\t\t\t\t\t\t|-\temail.tmpl \r\n\t\r\n\r\n# Core Usage\r\nThis section covers how to use the command line tool\r\n\r\n## Using GoS command without parameters\r\nIt is possible to invoke gos directly without commands. Simply answer the questions and watch your application compile. The program will guide you through the process.\r\n\r\n\t$GOPATH/bin/gos\r\n\r\n## GoS running application\r\nTo compile and run your GoS application invoke `gos` with the run parameter.\r\nThe example below will compile a package called `sample/test` with configuration file \t`server.xml`, a web root folder called `web` as well as a templates directory called  `tmpl` ,\r\n\t\t\r\n*Command of process described\r\n\t $GOPATH/bin/gos run sample/test server.xml web tmpl\r\n\t \r\nThe command above should compile and execute your program. Invoking the `gos` with the run parameter will put go-bindata in -debug mode so that you can edit your server resources and templates while your application is in running.\r\n## GoS export application\r\nExporting your application will wrap up all of your GoS project resources as one binary ready for distribution (Zips require too much work). To compile and export your GoS application invoke `gos` with the export parameter.\r\nFor example to export a package called `sample/test` with configuration file \t`server.xml`, a web root folder called `web` as well as a templates directory called  `tmpl`, the command below will be ran : \r\n\r\n\t*Command of process described\r\n\t$GOPATH/bin/gos export sample/test server.xml web tmpl\r\n\r\nUnlike running the GoS application, this build will have static copies of its resources at the time of compilation. The executable will be placed in your GoS project root (package root). This copy can be ran anywhere without the need of resources within your package.\r\n\r\n# Configuring GoS XML file\r\nThis section covers documentation of GoS XML template tags\r\n\r\n## Deploy\r\nApplication deploy specifies the manner that GoS should compile your application. Use `webapp` to have GoS generate a webserver for you. This tag should always be within the root of the `<gos/>` tag.\r\n*This tag is required\r\n\r\n\t<gos>\r\n\t\t...\r\n\t\t<deploy>webapp</deploy>\r\n\t\t...\r\n\t</gos>\r\n\t\t\r\n## Port\r\n(if applicable) Specifies the port your application should listen on. \r\n\r\n\t<gos>\r\n\t\t...\r\n\t\t<port>8080</port>\r\n\t\t...\r\n\t</gos>\r\n## Output\r\nThe name of the file that GoS will save.\r\n*This tag is required\r\n\t\r\n\t<gos>\r\n\t\t...\r\n\t\t<output>server_out.go</output>\r\n\t\t...\r\n\t</gos>\r\n## Key\r\n\r\n(if applicable) used as cookie store key within your web app\r\n\r\n\t<gos>\r\n\t\t...\r\n\t\t<key>my-key-braah</key>\r\n\t\t...\r\n\t</gos>\r\n## Init\r\nGoS will wrap the data within this tag into the usual Go `init()` function\r\nFor example :\r\n\t\t\r\n\t\t<gos>\r\n\t\t\t...\r\n\t\t\t<init> \r\n\t\t\t\tfmt.Println(\"Logging from init function\")\t\r\n\t\t\t</init>\r\n\t\t\t...\r\n\t\t</gos>\r\nWill translate into\r\n\r\n\tfunc init(){\r\n\t\tfmt.Println(\"Logging from init function\")\r\n\t}\r\nThis can be useful for registering custom declared structs for Session use.\r\n\r\n## Main\r\nGoS will wrap the data within this tag into the go `main()` function.\r\nFor example : \r\n\r\n\t\t<gos>\r\n\t\t\t...\r\n\t\t\t<main> \r\n\t\t\t\tfmt.Println(\"Logging from main function\")\t\r\n\t\t\t</main>\r\n\t\t\t...\r\n\t\t</gos>\r\nWill translate into\r\n\r\n\tfunc main(){\r\n\t\t...\r\n\t\tfmt.Println(\"Logging from Main function\")\r\n\t\t...\r\n\t}\r\n\r\n\r\n## Variables\r\nTo declare public variables that are accessible to your program use the `var` tag. Use the type parameter to specify the variable type. Use the `*` qualifier as appropriate.\r\nFor example \r\n\r\n\t\t<var type=\"string\">FreeServer</var>\r\nWill become (within your Go program)\r\n\r\n\t\tvar FreeServer string \r\n## Header\r\nThink of the `<header/>` tag as the interface of your application. It holds structure and object declarations.\r\n### Structs\r\nThe `<struct/>` tag will declare a new Go structure within within your generated Go src.\r\n#### Attributes\r\nname - The name of this structure\r\n** Innerxml Struct parameter declarations.\r\n\r\nThe example below declares a Go struct named DemoGos with a sub structure called DemoChild. The struct DemoGos has attributes SomeAttr and Child. \r\n\r\nThese structs are available everywhere within your application.\r\n\r\nWhenever this struct is initialized within a template, these variables are accessible as that object's properties.\r\n\r\n\t<gos>\r\n\t\t...\r\n\t\t<header>\r\n\t\t\t<struct name=\"DemoChild\">\r\n\t\t\t\tSomeOtherAttr string\r\n\t\t\t</struct>\r\n\t\t\t<struct name=\"DemoGos\">\r\n\t\t\t\tSomeAttr string\r\n\t\t\t\tChild *DemoChild\r\n\t\t\t</struct>\r\n\t\t</header>\r\n\t\t...\r\n\t</gos>\r\n### Objects\r\nThe `<object/>` tag declares a GoS object. It needs struct name to have a parameter map, which is used whenever this object is initialized within a template. Please keep in mind that the struct specified for this object must be returned all the time.\r\n#### Attributes\r\n\tstruct - the name of a struct available to the application\r\n\tname - name of object\r\nThe example below will declare an object called `myDemoObject`. The inner content of this tag is where object methods are declared. (remember to jumpline after each declaration!!!) \r\nThese functions also need to be declared within your GoS application xml template or another imported xml template.\r\n \r\n\r\n\t<gos>\r\n\t\t...\r\n\t\t<header>\r\n\t\t<object struct=\"DemoGos\" name=\"myDemoObject\">\r\n\t\t\tHackfmt(save string)\r\n\t\t\tWhatsMyAttr(save string,end string) string\r\n\t\t\tWhatsMyAttrLength() string\r\n\t\t</object>\r\n\t\t</header>\r\n\t\t...\r\n\t</gos>\r\nBy declaring an object :\r\n - GoS will create a Go lang `type` with the object's name linked to its respective struct\r\n - GoS will create a local and template accessible method to initialize this object. Local method :  `net_myDemoObject(args ...interface{}) (d DemoGos)`. Template method : {{$emptyObject :=  myDemoObject}}.\r\n\r\n-  Invoking object with static parameters : `{{$object := myDemoObject /{`\\`SomeAttr\\`:\\`ValueIn\\`}/ }}`. To pass initialization variables we can use a static json escape holders `/{` and `}/`. To initialize your variable with other objects create a method that returns this object by using the desired input initialization objects to use.\r\n\r\n- Each function specified within this tag, will be generated to accept this object as a mutable parameter within templates as well as your application's local scope. Local function generated :\r\n `\tfunc (object DemoGos) Hackfmt(save string) `\r\n You can access this function via templates by invoking these calls within any template in this application : `{{$object | Hackfmt \"data\"}}` or `{{$error := $object | Hackfmt \"data\" }}`. The return type declared will be returned, so please make sure that type is returned within the linked method.\r\n\r\n*If an Object and a template share a struct you can initialize the template and compile it to html with this call `{{b<template name> $object}}`\r\n\r\n\r\n## Methods\r\nSorry for the confusion, Methods translate into usual go functions (`func`). \r\nThis section covers how to create functions for your applications. These functions, known as Methods within GoS are linked for use with your templates, api end points, objects, timers and anywhere else within your application.\r\n\r\n### Attributes\r\n\r\n\tname - Specifies the name of the function. Please keep in mind that usage of this function outside of templates requires the `net_` added to name because GoS appends that prefix to avoid any method redeclaration. If you desire to write methods for strict usage outside of template files we recommend writing a normal Go package and importing it with the `<import/>` tag.\r\n\t\r\n\treturn - The return type of the function. Ie: string,bool or a custom struct `DemoGos` \r\n\tvar - This is a comma delimited string of the variables you wish this function to have. Say we need a function that has two parameters `param1 string, param2 string` it will be declared `param1,param2`. Before using the variable make sure its type is defined within the method. For example to log `param1` the call would be `fmt.Println(param1.(string))`\r\n\t\r\n\tautoface - GoS has the capability of taking methods declared within objects and look for the corresponding method name, and create a Go function to mutate the corresponding object with the matching method. This feature is enabled by default to disable it for a method and have it not converted as a method to mutate an object set the attribute to false.\r\n\tlimit - This is a comma delimited string to specify the object types this function will work with, if linked. For example to limit a function to DemoGos and myDemoObject this attribute will be set to `DemoGos,myDemoObject` \r\n\tobject - If this method is linked to an object this specifies the local name of the object within the function. By default it is `object`\r\n\t**InnerXml - This contains your method declarations. GoS will wrap up the inner xml data with your method attributes to create a Go func\r\n\r\nIn the example below, one method will be created, the corresponding method will then be added as an object method as well.  Since input variables are declared within the object, we do not need to add the `var` attribute to our method declaration. \r\n\r\n\t\t<gos>\r\n\t\t\t...\r\n\t\t\t<header>\r\n\t\t\t<object struct=\"DemoGos\" name=\"myDemoObject\">\r\n\t\t\t\tHackfmt(save string)\r\n\t\t\t</object>\r\n\t\t\t</header>\r\n\t\t\t...\r\n\t\t\t<methods>\r\n\t\t\t\t<method name=\"Hackfmt\">\r\n\t\t\t\tfmt.Println(save + \" -> \" + object.SomeAttr) \r\n\t\t\t\t</method>\r\n\t\t\t</methods>\r\n\t\t\t...\r\n\t\t</gos>\r\n\t\t... Output by GoS :\r\n\t\t//Generated GoLang function\r\n\t\tfunc (object DemoGos) Hackfmt(save string)  \r\n\t\t//Generated template method for object\r\n\t\tfunc  net_Hackfmt(save string,object DemoGos) string \r\n\r\nOnce a method is used within an interface it will not be generated again and can only be invoked with the linked object type.  The snipped below will use declared function `Hackfmt` within a template. The `net_` prefix is not needed within templates.\r\n\t\r\n\t{{$object := myDemoObject}}\r\n\t{{$object | Hackfmt \"saveString\" }}\r\n\t<!-- Another way to call it -->\r\n\t{{Hackfmt \"saveString\" $object }}\r\n\r\nThe method can also be used outside of templates with the snipped below :\r\n\t\r\n\tobject := DemoGos{}\r\n\tobject.Hackfmt(\"saveString\")\t\r\n\r\nAnother test case is declaring a method that is not used with any objects and is still accessible within templates and function calls outside of it as well. The variables set in the var tag need their type declared during use. The example below we will declare a function that sends emails and returns a `bool`.\t\t\r\n\r\n\t\t<gos>\r\n\t\t\t...\r\n\t\t\t\t<methods>\r\n\t\t\t\t\t<method name=\"sendEmail\" var=\"to,from\" return=\"bool\">\r\n\t\t\t\t\t    go fmt.Println(\"Send Email -> \" + to.(string) + \" ->\" + from.(string))\r\n\t\t\t\t\t\treturn true\r\n\t\t\t\t</method>\r\n\t\t\t\t...\r\n\t\t\t</methods>\r\n\t\t\t...\r\n\t\t</gos>\r\n\t\t... Output by GoS :  \r\n\t\t//Generated template method\r\n\t\tfunc net_sendEmail(args ...interface{}) bool\r\n\r\nNow we will create a template class that will output a Bootstrap alert if an email is sent and an error if not. \r\nNote the usage of the Pipe call although \"from\" is not an object and send email is not an object method.\r\n\r\n\t{{ if \"from\" | sendEmail \"to\" }}\r\n\t\t\t    {{Bootstrap_alert /{`Strong`:`Success`,`Type`:`success`, `Text` : `Email Sent`}/ }}\r\n\t{{else}}\r\n\t\t       {{Bootstrap_alert /{`Strong`:`Error`,`Type`:`danger`, `Text` : `Please Login`}/ }}\r\n\t{{end}}\r\n\t\r\nDo not let the `|` scare you (known as pipe),  in our case the function parameter `\"from\"` becomes the last parameter of the function call and ones following the method name the first parameters, ordered in the way they are inputted. hence : `LastParam | functionName param1 param2... `.\r\nAnother way to invoke your function is  :\r\n\t\r\n\t\t{{if sendEmail \"to\" \"from\" }}\r\n\t\t\t  {{Bootstrap_alert /{`Strong`:`Success`,`Type`:`success`, `Text` : `Email Sent`}/ }}\r\n\t\t{{end}}\r\n\r\nGoS has built in templates as well, [check them out here](#builtin-template-functions)\r\n\r\nThat Easy!!!!!!\r\n## Timers\r\nThis section covers how to create methods that are called after every certain unit of time intervals. GoS uses the `<timer/>` tag to generate timer execution block with the target method specified.\r\n\r\n\r\n### Attributes\r\n\t\r\n\tname - The name of the timer. Variable only accessible within `main()` function call\r\n\tmethod - The name of the method declared in GoS, that is ran after each interval. Please keep in mind that a timer method cannot have a return call within the method and variable declarations. Only the name will be used, any other attribute of the method name declared will be ignored. Your method will also not be available to your application. For example to use a method named `Hackfmt` this attribute would just be that methods name (Hackfmt). \r\n\tinterval - The number multiplied by the Go lang `time` units to determine the intervals of execution\r\n\tunit - This is the Go lang time unit constant used to determine how often your timer will execute\r\n\r\nThe following example will link Hackfmt to a timer that will be executed every 60 seconds\r\n\r\n\t<gos>\r\n\t\t...\r\n\t\t<timers>\r\n\t\t<timer method=\"Hackfmt\" interval=\"60\" unit=\"Second\" name=\"PublicName\"></timer>\r\n\t</timers>\r\n\t\t...\r\n\t</gos>\r\n\tGenerated output :\r\n\t...\r\n\tmain(){\r\n\t...\r\n\tPublicName := time.NewTicker(time.Second *  60)\r\n\t\t\t\t\t    go func() {\r\n\t\t\t\t\t        for _ = range PublicName.C {\r\n\t\t\t\t\t           // -> Hackfmt()\r\n\t\t\t\t\t        }\r\n\t\t\t\t\t    }()\r\n\t...\r\n\t}\r\n\r\n## Templates\r\nThis section covers how to declare templates outside of your web root. This allows you to create template files that are not served within your server. This allows for the creation of template classes, that for example send emails and returns a success alert as feedback in the form of HTML. \r\nThis allows for easy html template class generation, and binary compilation of file to ensure security of code and file  invisibility. \r\n\r\n### Attributes\r\n\t\r\n\tname - This is the name of the template within your application. You can load a template by simply calling `{{<template name>}}`\r\n\t\r\n\ttmpl - This specifies the path to the template file with the declared template root in mind. For example if our file was in `PACKAGENAME/tmpl/file.tmpl` the tmpl attribute will be `file` because GoS will append the needed prefixes to find and compile the template file. \r\n\t\r\n\tstruct - This specifies a declared `struct` to be used as the template's parameter map. \r\n\r\nIn the example below, a struct will be declared for an alert. The example will initialize the template in three ways: by initializing the struct and then building it, initializing it with static Json parameters and without any parameters at all. Remember within any template file in your project you may load the template by typing its name. \r\n\r\nThe examples below will declare a struct and use that struct's parameters within the template. It is possible to build a template from static JSON init and even via object initialization, mutating and then compiling it to `HTML code` \r\n\r\nThe example is using a template file with path \t`bootstrap/alert`.\r\n*Due to the canonical nature of our asset to binary tools, file paths must be in lower case.\r\n\r\nServer.xml\r\n\t\r\n\t<gos>\r\n\t\t...\r\n\t\t<header>\r\n\t\t\t<struct name=\"Bootstrap_alert\">\r\n\t\t\t\t\tStrong string\r\n\t\t\t\t\tText string\r\n\t\t\t\t\tType string\r\n\t\t\t</struct> \r\n\t\t\t...\r\n\t\t</header>\r\n\t\t...\r\n\t\t<templates>\r\n\t\t\t...\r\n\t\t\t <template name=\"Bootstrap_alert\" tmpl=\"bootstrap/alert\" struct=\"Bootstrap_alert\" /> \r\n\t\t</templates>\r\n\t</gos>\r\n\r\ntmpl/bootstrap/alert.tmpl :\r\n\r\n\t\t\r\n\t <div class=\"alert alert-{{.Type}} alert-dismissible fade in\" role=\"alert\">\r\n\t<strong>{{.Strong}}</strong> <p>{{.Text}}</p>\r\n\t</div>\r\n\r\nNow to use the template within other templates there are three ways of doing this. (With the example above in mind)\r\n\t\t\t\t\r\n\t\t<!-- No parameters -->\r\n\t\t{{Bootstrap_alert}}\r\n\t\t<!-- Static JSON -->\r\n\t\t{{Boostrap_alert /{`Type`:`danger`,`Strong`: `Strong`,`Text` :`Test`  }/ }}\r\n\t\t<!--Struct object Init, Static Json parameters can be supplied as well!! Add  `c` to your template name to initialize its struct; And add `b` to your template name to output the html -->\r\n\t\t{{ $mutable := cBootstrap_alert }}\r\n\t\t{{ $mutable | dbOperation \"queryvalue\"  }}\r\n\t\t{{bBootstrap_alert}}\r\n\t\t\r\n\r\n## API Generation\r\nThis section covers how to create http request hooks within your GoS application. If a request's method and path match a declared endpoint, the method declared as the matching end point in the GoS project will be ran. Linking a method to your web server's api will prevent it from being used anywhere else within your application. Similar to a template within your web root, you can access session variables within api endpoint linked methods with the variable `session`.\r\n\r\n### Attributes\r\n\r\n\tpath - the path to the api hook within your server\r\n\tmethod - The GoS declared method ran when the Hook is called.\r\n\ttype - This specifies the request method ie: POST,GET,PUT,DELETE\r\n\r\nThe example below will declare a method and api end point within the GoS configuration called login. The hook defined will create a rest call : `POST /index/api`\r\n\r\n\t<gos>\r\n\t\t...\r\n\t\t\t<methods>\r\n\t\t\t\t<method name=\"login\" > \r\n\t\t\t\t\t//login function\r\n\t\t\t\t\tresponse = mResponse(Button{Color:\"#fff\"})\r\n\t\t\t\t\tfmt.Println(\"Login!! -> \" + session.Values[\"username\"].(string))\r\n\t\t\t</method>\r\n\t\t\t...\r\n\t\t</methods>\r\n\t\t...\r\n\t\t<endpoints>\r\n\t\t\t   <end path=\"/index/api\" method=\"login\" type=\"POST\" ></end>\r\n\t\t</endpoints>\r\n\t\t...\r\n\t</gos>\r\n\tThis condition will be added as a check prior to the server attempting to find a file matching the request path within the web root : \r\n\t\r\n\tif  r.URL.Path == \"/index/api\" && r.Method == strings.ToUpper(\"POST\") {\r\n\t\tresponse = mResponse(Button{Color:\"#fff\"})\r\n\t\tfmt.Println(\"Login!! -> \" + session.Values[\"username\"].(string))\r\n\t}\r\n\t\r\n\r\nHere are the variables that are available to your api method code block :\r\n\r\n\tresponse - String response of api.\r\n\tsession - Current Gorilla session of the request (if applicable). Use the session.Values dictionary to access and save data.\r\n\tHandy functions :\r\n\tmResponse - will convert any object into a JSON string for output. The example below converts Button into a JSON string for output.\r\n\t\r\n\r\n\t\r\n## Imports\r\nImports allow you to import other Go lang packages for use within your GoS XML template. It also allows you to import other GoS xml template by specifying an XML file relative to `$GOPATH/src`. This will include that files imports wether template files or Go lang packages, structs,objects,methods,timers,templates and api endpoints. \r\n\r\nThis tag belongs only in the root of the `<gos/>` tag\r\nExample import :\r\n\t\t\r\n\t\t<import src=\"mongo.xml\"/>\r\n\t\t<!-- Importing Golang Packages -->\r\n\t\t<import src= \"gopkg.in/mgo.v2\"/>\r\n\t\t<import src=\"gopkg.in/mgo.v2/bson\"/>\r\n\r\nTo expedite the process of using external packages within your application you can you set the `fetch` attribute to true.\r\nThe example below will download the package using the `go get` command during the generation of your application.\r\n\r\n\t<import src= \"gopkg.in/mgo.v2\" fetch=\"true\"/>\r\n\r\n# Builtin template functions\r\nThis section covers the list of functions available within all your templates compiled using GoS.\r\nPlease keep in mind that the .Session and .R variable are only available to template files within your server web root.\r\n\r\n - js - will take its only input and add it as the src attribute of the html `<script/>` tag `<script src=\"var\"></script>`\r\n\t - Usage : `{{js  \"dist/js/bootstrap.js\"}}`\r\n - css - Will take its only input and add it as the href attribute of the html  `<link/>` tag.\r\n\t - Usage : `{{css \"dist/css/bootstrap.css\" }} `\r\n - sd - Will delete the current page session\r\n\t - Usage : `{{.Session | sd }}` \r\n - sr - Will remove a specified session key\r\n\t - Usage : `{{.Session | sr \"KeyName\" }}` \r\n - sc - Will check to see if a session key exists\r\n\t - Usage : `{{.Session | sc \"KeyName\" }}`\r\n - ss - Will set a string value as a session variable.\r\n\t - Usage : `{{.Session | ss \"KeyName\" \"Variable\" }}` \r\n - sso - Will set a struct as a session variable. \r\n\t - Usage : This requires three steps to work.\r\n\t\t -   Import `encoding/gob` with the import tag. Do not set the fetch attribute.\r\n\t\t - Register the struct types within your `<init/>` tag of your GoS project root. \r\n\t\t\t\t\t \r\n\t\t\t\t\t init(){ \r\n\t\t\t\t\t ...\r\n\t\t\t\t\t gob.Register(&Object{})\r\n\t\t\t\t\t \r\n\t\t\r\n\t\t- Once the steps above are completed you can now set the linked object as session variables : `{{.Session | sso \"KeyName\" $object_with_Object_struct }}`\r\n - sgo - Will retrieve a a session stored object\r\n\t - Usage : `{{$desiredObject =  .Session | sgo \"keyName\" }}` \r\n - sg - Will retrieve a string stored as a session variable.\r\n\t - Usage : `{{$string := .Session | sg \"KeyName\" }}` \r\n - form - Will retrieve a request variable no matter how it is submitted.\r\n\t- Usage : `{{ $input = .R | }}` .  `.R` is a page variable with type `http.Request` from the Go lang package `net/http`\r\n - eq - Will compare two variables and return a `bool` of value true if they are equal\r\n\t - Usage : `{{if eq \"Obj1\" \"Obj1\" }} {{end}}` \r\n - neq - Will compare two variables and return a `bool` of value true if they are not equal.\r\n\t - Usage :  `{{if neq \"Obj1\" \"Obj2\" }} {{end}}` \r\n - lte - Will see if the first number declared is less than or equal to than the second number declared, if this statement proves to be true it will return a `bool` with the value true.\r\n\t - Usage : `{{if lte 5 10 }} {{end}}` \r\n - lt - Will see if the first number declared is less than the second number declared, if this statement proves to be true it wil return a `bool` with value true.\r\n\t - Usage  : `{{if lt 5  7 }} {{end}}`\r\n - gte - Will see if the first number declared is greater than or equal to the second number declared, if this statement proves to be true it will return a `bool` with value true\r\n\t - Usage : `{{if gte 5 2}} {{end}}` \r\n - gt -  Will see if the first number declared is greater than or equal to the second number declared, if this statement proves to be true it will return a `bool` with value true\r\n\t - Usage : `{{if gt 5 2}} {{end}}` \r\n\r\n# Gos page\r\nThis section covers the variables accessible to a template page in your GoS project's web root.\r\n\r\nMore information on [sessions.Session](http://www.gorillatoolkit.org/pkg/sessions)\r\n\r\nThe Go lang struct for a page in your web root : \r\n\r\n\t\t type Page struct {\r\n\t\t\t\t\t    Title string\r\n\t\t\t\t\t    Body  []byte\r\n\t\t\t\t\t    request *http.Request\r\n\t\t\t\t\t    isResource bool\r\n\t\t\t\t\t    R *http.Request\r\n\t\t\t\t\t    Session *sessions.Session\r\n\t\t\t}\r\n\r\nThese variables are accessible to template web pages within your project's web root. For templates in your template class folder, GoS will use the explicitly defined struct for that template.\r\n\r\n# Bug tracking\r\n\r\nGithub Issue tracker!!!!","google":"UA-71342160-1","note":"Don't delete this file! It's used internally to help with page regeneration."}