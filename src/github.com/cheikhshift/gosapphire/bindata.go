// Code generated by go-bindata.
// sources:
// web/.DS_Store
// web/dist/.DS_Store
// web/dist/css/bootstrap-theme.css
// web/dist/css/bootstrap-theme.css.map
// web/dist/css/bootstrap-theme.min.css
// web/dist/css/bootstrap-theme.min.css.map
// web/dist/css/bootstrap.css
// web/dist/css/bootstrap.css.map
// web/dist/css/bootstrap.min.css
// web/dist/css/bootstrap.min.css.map
// web/dist/fonts/glyphicons-halflings-regular.eot
// web/dist/fonts/glyphicons-halflings-regular.svg
// web/dist/fonts/glyphicons-halflings-regular.ttf
// web/dist/fonts/glyphicons-halflings-regular.woff
// web/dist/fonts/glyphicons-halflings-regular.woff2
// web/dist/js/bootstrap.js
// web/dist/js/bootstrap.min.js
// web/dist/js/npm.js
// web/gopher_head.png
// web/index.html
// web/indexl.tmpl
// tmpl/.DS_Store
// tmpl/bootstrap/.DS_Store
// tmpl/bootstrap/alert.tmpl
// tmpl/bootstrap/button.tmpl
// DO NOT EDIT!

package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// webDs_store reads file data from disk. It returns an error on failure.
func webDs_store() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/.DS_Store"
	name := "web/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistDs_store reads file data from disk. It returns an error on failure.
func webDistDs_store() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/.DS_Store"
	name := "web/dist/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistCssBootstrapThemeCss reads file data from disk. It returns an error on failure.
func webDistCssBootstrapThemeCss() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/css/bootstrap-theme.css"
	name := "web/dist/css/bootstrap-theme.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistCssBootstrapThemeCssMap reads file data from disk. It returns an error on failure.
func webDistCssBootstrapThemeCssMap() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/css/bootstrap-theme.css.map"
	name := "web/dist/css/bootstrap-theme.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistCssBootstrapThemeMinCss reads file data from disk. It returns an error on failure.
func webDistCssBootstrapThemeMinCss() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/css/bootstrap-theme.min.css"
	name := "web/dist/css/bootstrap-theme.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistCssBootstrapThemeMinCssMap reads file data from disk. It returns an error on failure.
func webDistCssBootstrapThemeMinCssMap() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/css/bootstrap-theme.min.css.map"
	name := "web/dist/css/bootstrap-theme.min.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistCssBootstrapCss reads file data from disk. It returns an error on failure.
func webDistCssBootstrapCss() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/css/bootstrap.css"
	name := "web/dist/css/bootstrap.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistCssBootstrapCssMap reads file data from disk. It returns an error on failure.
func webDistCssBootstrapCssMap() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/css/bootstrap.css.map"
	name := "web/dist/css/bootstrap.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistCssBootstrapMinCss reads file data from disk. It returns an error on failure.
func webDistCssBootstrapMinCss() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/css/bootstrap.min.css"
	name := "web/dist/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistCssBootstrapMinCssMap reads file data from disk. It returns an error on failure.
func webDistCssBootstrapMinCssMap() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/css/bootstrap.min.css.map"
	name := "web/dist/css/bootstrap.min.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistFontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func webDistFontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/fonts/glyphicons-halflings-regular.eot"
	name := "web/dist/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistFontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func webDistFontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/fonts/glyphicons-halflings-regular.svg"
	name := "web/dist/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistFontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func webDistFontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/fonts/glyphicons-halflings-regular.ttf"
	name := "web/dist/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistFontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func webDistFontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/fonts/glyphicons-halflings-regular.woff"
	name := "web/dist/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistFontsGlyphiconsHalflingsRegularWoff2 reads file data from disk. It returns an error on failure.
func webDistFontsGlyphiconsHalflingsRegularWoff2() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/fonts/glyphicons-halflings-regular.woff2"
	name := "web/dist/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistJsBootstrapJs reads file data from disk. It returns an error on failure.
func webDistJsBootstrapJs() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/js/bootstrap.js"
	name := "web/dist/js/bootstrap.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistJsBootstrapMinJs reads file data from disk. It returns an error on failure.
func webDistJsBootstrapMinJs() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/js/bootstrap.min.js"
	name := "web/dist/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webDistJsNpmJs reads file data from disk. It returns an error on failure.
func webDistJsNpmJs() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/dist/js/npm.js"
	name := "web/dist/js/npm.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webGopher_headPng reads file data from disk. It returns an error on failure.
func webGopher_headPng() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/gopher_head.png"
	name := "web/gopher_head.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webIndexHtml reads file data from disk. It returns an error on failure.
func webIndexHtml() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/index.html"
	name := "web/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// webIndexlTmpl reads file data from disk. It returns an error on failure.
func webIndexlTmpl() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/web/indexl.tmpl"
	name := "web/indexl.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// tmplDs_store reads file data from disk. It returns an error on failure.
func tmplDs_store() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/tmpl/.DS_Store"
	name := "tmpl/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// tmplBootstrapDs_store reads file data from disk. It returns an error on failure.
func tmplBootstrapDs_store() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/tmpl/bootstrap/.DS_Store"
	name := "tmpl/bootstrap/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// tmplBootstrapAlertTmpl reads file data from disk. It returns an error on failure.
func tmplBootstrapAlertTmpl() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/tmpl/bootstrap/alert.tmpl"
	name := "tmpl/bootstrap/alert.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// tmplBootstrapButtonTmpl reads file data from disk. It returns an error on failure.
func tmplBootstrapButtonTmpl() (*asset, error) {
	path := "/Users/Adrian/gosapphire/src/github.com/cheikhshift/gosapphire/tmpl/bootstrap/button.tmpl"
	name := "tmpl/bootstrap/button.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web/.DS_Store": webDs_store,
	"web/dist/.DS_Store": webDistDs_store,
	"web/dist/css/bootstrap-theme.css": webDistCssBootstrapThemeCss,
	"web/dist/css/bootstrap-theme.css.map": webDistCssBootstrapThemeCssMap,
	"web/dist/css/bootstrap-theme.min.css": webDistCssBootstrapThemeMinCss,
	"web/dist/css/bootstrap-theme.min.css.map": webDistCssBootstrapThemeMinCssMap,
	"web/dist/css/bootstrap.css": webDistCssBootstrapCss,
	"web/dist/css/bootstrap.css.map": webDistCssBootstrapCssMap,
	"web/dist/css/bootstrap.min.css": webDistCssBootstrapMinCss,
	"web/dist/css/bootstrap.min.css.map": webDistCssBootstrapMinCssMap,
	"web/dist/fonts/glyphicons-halflings-regular.eot": webDistFontsGlyphiconsHalflingsRegularEot,
	"web/dist/fonts/glyphicons-halflings-regular.svg": webDistFontsGlyphiconsHalflingsRegularSvg,
	"web/dist/fonts/glyphicons-halflings-regular.ttf": webDistFontsGlyphiconsHalflingsRegularTtf,
	"web/dist/fonts/glyphicons-halflings-regular.woff": webDistFontsGlyphiconsHalflingsRegularWoff,
	"web/dist/fonts/glyphicons-halflings-regular.woff2": webDistFontsGlyphiconsHalflingsRegularWoff2,
	"web/dist/js/bootstrap.js": webDistJsBootstrapJs,
	"web/dist/js/bootstrap.min.js": webDistJsBootstrapMinJs,
	"web/dist/js/npm.js": webDistJsNpmJs,
	"web/gopher_head.png": webGopher_headPng,
	"web/index.html": webIndexHtml,
	"web/indexl.tmpl": webIndexlTmpl,
	"tmpl/.DS_Store": tmplDs_store,
	"tmpl/bootstrap/.DS_Store": tmplBootstrapDs_store,
	"tmpl/bootstrap/alert.tmpl": tmplBootstrapAlertTmpl,
	"tmpl/bootstrap/button.tmpl": tmplBootstrapButtonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{tmplDs_store, map[string]*bintree{}},
		"bootstrap": &bintree{nil, map[string]*bintree{
			".DS_Store": &bintree{tmplBootstrapDs_store, map[string]*bintree{}},
			"alert.tmpl": &bintree{tmplBootstrapAlertTmpl, map[string]*bintree{}},
			"button.tmpl": &bintree{tmplBootstrapButtonTmpl, map[string]*bintree{}},
		}},
	}},
	"web": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{webDs_store, map[string]*bintree{}},
		"dist": &bintree{nil, map[string]*bintree{
			".DS_Store": &bintree{webDistDs_store, map[string]*bintree{}},
			"css": &bintree{nil, map[string]*bintree{
				"bootstrap-theme.css": &bintree{webDistCssBootstrapThemeCss, map[string]*bintree{}},
				"bootstrap-theme.css.map": &bintree{webDistCssBootstrapThemeCssMap, map[string]*bintree{}},
				"bootstrap-theme.min.css": &bintree{webDistCssBootstrapThemeMinCss, map[string]*bintree{}},
				"bootstrap-theme.min.css.map": &bintree{webDistCssBootstrapThemeMinCssMap, map[string]*bintree{}},
				"bootstrap.css": &bintree{webDistCssBootstrapCss, map[string]*bintree{}},
				"bootstrap.css.map": &bintree{webDistCssBootstrapCssMap, map[string]*bintree{}},
				"bootstrap.min.css": &bintree{webDistCssBootstrapMinCss, map[string]*bintree{}},
				"bootstrap.min.css.map": &bintree{webDistCssBootstrapMinCssMap, map[string]*bintree{}},
			}},
			"fonts": &bintree{nil, map[string]*bintree{
				"glyphicons-halflings-regular.eot": &bintree{webDistFontsGlyphiconsHalflingsRegularEot, map[string]*bintree{}},
				"glyphicons-halflings-regular.svg": &bintree{webDistFontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{}},
				"glyphicons-halflings-regular.ttf": &bintree{webDistFontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{}},
				"glyphicons-halflings-regular.woff": &bintree{webDistFontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{}},
				"glyphicons-halflings-regular.woff2": &bintree{webDistFontsGlyphiconsHalflingsRegularWoff2, map[string]*bintree{}},
			}},
			"js": &bintree{nil, map[string]*bintree{
				"bootstrap.js": &bintree{webDistJsBootstrapJs, map[string]*bintree{}},
				"bootstrap.min.js": &bintree{webDistJsBootstrapMinJs, map[string]*bintree{}},
				"npm.js": &bintree{webDistJsNpmJs, map[string]*bintree{}},
			}},
		}},
		"gopher_head.png": &bintree{webGopher_headPng, map[string]*bintree{}},
		"index.html": &bintree{webIndexHtml, map[string]*bintree{}},
		"indexl.tmpl": &bintree{webIndexlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

