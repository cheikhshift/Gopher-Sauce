 <?xml version="1.0" encoding="UTF-8"?>
<gos>
	<!--Stating the deployment type GoS should compile -->
	<!-- Curent valid types are webapp,shell and precursor -->
	<!-- Shell = cli, sort of a GoS(Ghost) in the Shell -->
	<deploy>webapp</deploy>
	<port>8080</port>
	
	<!-- Using import within different tags will have different results -->
	<!-- We going to make the goPkg Mongo Db Driver available to our application -->
	<!-- Using <import/> within the <go/> tag is similar to using the import call within a .go file -->
	<!-- To be less dramating, GoS will skip packages that it has already imported -->
	
	<!-- Go File output name -->
	<output>server_out.go</output>

	<key>something-secretive-is-what-a-gorrilla-needs</key>
	<!-- The <init/> tag is similar to the init function within Go, -->
	<init>
		fmt.Println("Not up yet....?\n")
	</init>
	<!-- func main() -->
	<main>

	</main>
	<!-- Declare global variables -->
	<var type="string">FreeServer</var>
	<!-- Contains interfaces and structs
	 that will be used by the GoS application -->
	<header> 
			<!-- remember to Jumpline when stating methods or different struct attributes, it is vital for our parser \n trick -->
		<struct name="DemoChild">
			SomeOtherAttr string
		</struct>
		<struct name="Basic_response">
			SomeOtherAttr string
		</struct>
		<struct name="DemoGos">
			SomeAttr string
			Child *DemoChild
		</struct>
		<struct name="Bootstrap_alert">
			Strong string
			Text string
			Type string
		</struct>
		<struct name="Button">
			Color string
		</struct>
		<object struct="DemoGos" name="myDemoObject">
			Hackfmt(save string)
			WhatsMyAttr(save string,end string) string
			WhatsMyAttrLength() string

		</object>
	</header>
	<methods>
		<!-- Vars are defined as usual except within the var attribute for example :  -->
		<!-- If there is a basic go function : func hackfmt(data string, data2 string) -->
		<!-- the attribute names would be called as such var="data string,data2 string" -->
		<!-- Similar to a go function decleration-->
		<!--  if a method matches the criteria for an  interface it will be used as an interface method -->
		<!-- To prevent that use the autoface attribute and set it to "false" By default it is true -->
		<!-- Use the keep-local="true" attribute to limit a method within a Go file -->
		
		<!-- Sometimes your method will return data  -->
		<!-- And to do so we will need to add a return var list by using the return attribute  -->
		<method name="WhatsMyAttrLength" return="string">
				return ""
		</method>

		<method name="sendEmail" var="to,from" return="bool">
			   	go fmt.Println("Send Email -> " + to.(string) + " ->" + from.(string))
				return true
		</method>
		<!-- Sometimes the autointerface will reuse the wrong the function, or your interface methods need a bit more distinction -->
		<!-- Vis a  vis which object types are used in generating these mutating methods -->
		<!--Use the limit attribute to narrow down the applicable structs for this method -->
		<!-- Use the object attribute to determine the name of the local variable name to be mutated within the function. By default GoS will assume object is the variable name  -->
		<method name="WhatsMyAttr" var="save,end" limit="myDemoObject" object="o" autoface="false"> 
			gb := save.(string) + end.(string)
			fmt.Printf(gb)
		</method>
		<!-- API compatible methods do not need var,limit or any autoface attributes. Simply give it a name which can be used when declaring an endpoint -->
		<method name="login" > 
			//login function
			response = mResponse(Button{Color:"#fff"})
			fmt.Println("Login!! -> " + session.Values["username"].(string))
		</method>

			<method name="timerMethod" > 
			//login function
			
			fmt.Println("Clean up resources")
		</method>
	</methods>
	<timers>
		<!-- This is where timer calls are placed, The Timer tag has two attributes, method,interval, and name  -->
		<!-- method is the function called, interval is the time period in between calls in seconds. And name refers to the timer public name -->
		<!-- Useful for gettings stats on timer -->
		<!-- When declaring a method that will be used with the timer call, you must leave the var attribute empty as well as return -->
		<!-- The only object accessible is the timer object think of the go function being called with the timer as a variable  timerMethod(timer *Timer) -->
		<timer method="timerMethod" interval="60" unit="Second" name="PublicName"></timer>
	</timers>
	<templates>
 		<!-- Template libraries are useful for expediting page creation and reuse common website elements within this GoS application -->
 		<!-- Templates are nested and customized with the template function instead of using the normal {{template "Name"}} call you can now use {{Button &{Color:"#fff"}& }}
 		{{Modal &{Color:"#fff"}& }}  -->
 		<!-- *Notice that special braces are used to initialize the parameters of the struct '&{' and '}&' -->
 		<template name="Button" tmpl="bootstrap/button" struct="Button" /> 
 		<template name="Bootstrap_alert" tmpl="bootstrap/alert" struct="Bootstrap_alert" /> 
 		
	</templates>
	<endpoints>
      <!-- Depending on your build type the usage of this tag will vary. -->
      <!-- For WebServers it will override any request for a given path and run the specified method. No vars or return types are needed for  -->
      <!-- methods linked to an API call, please keep in mind that you may use w for http.ResponseWriter and r for http.Request . Additional available function variables is params and session. If a function is api listed it will not be used anywhere else.-->
      <!-- <end /> is the endpoint tag and has the variables path,method, -->
      <!-- Happy trails!!! -->
      <end path="/index/api" method="login" type="POST" ></end>
	</endpoints>
</gos>
